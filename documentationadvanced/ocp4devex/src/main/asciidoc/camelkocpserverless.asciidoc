== Camel K and Openshift Serverless

=== Introduction

Openshift Serverless, based on Knative is the serverless technology that was introduced in Openshift 4.2. Openshift Serverless enables Pods running on Openshift to be scaled to 0 therefore taking zero processing power. Only when called, Openshift Serverless will scale the Pod up on demand before processing the request. Openshift Serverless also has the ability to autoscale based on load before eventually scaling back to zero when no requests are being received. 

Openshift Serverless supports "Serving" and "Eventing"

At the time of writing, Serving is in technology preview, and Eventing is in Developer Preview

"Serving" enables request/response workloads, and Eventing enables asynchronous event based workloads using cloudevents. In this lab, we are going to look at both serverless and eventing, and how easy it is to integration with Camel K.

Whilst Openshift Serverless has it's own cli (kn), the purpose of this lab is to show the integration of Camel K into Openshift Serverless.

=== Openshift Serverless and the Operator Lifecycle Manager

.Openshift Serverless and the Operator Lifecycle Manager
****
Openshift Serverless uses the Operator Lifecycle manager, this means that its operator and Custom Resource Definitions (CRDs) will be added to Openshift via "OLM". Once created, the new CRDs will extend the Openshift data model allowing Openshift Serverless to be managed using the standard ‘oc’ command. Installing operators requires a higher cluster privilage so the presenter will have already set these up for you.
****

=== Create a new project

In the browser based terminal window, create a new project called 'knative-userx' where 'x' is your allocated user number 

[source,shell]
----
oc new-project knative-userx
----

Before we can create an integration, we need to add a Camel K 'IntegrationPlatform'.

In the terminal window, type

[source,shell]
----
oc apply -f https://raw.githubusercontent.com/utherp0/workshop4/master/camelfiles/camelkplatform/integrationplatform.yaml
----

=== Create Knative Messaging Channel 

Openshift Serverless uses Knative eventing, Knative eventing is a loosely couple asynchronous architecture allowing event producers to send an event to one or more event consumers. Event Consumers can be scaled to 0 when no events are folowing through the system.

By default, Knative uses an in memory messaging channel. In this lab we will configure 2 of these channels to use with Camel K

Options are also available to replace in memory messaging with other event sources such as the Kafka Channel. By combining Camel K and Red Hat AMQ Streams (Red Hats Kafka Implementation) on Openshift you create a powerful / reliable cloud native eventing platform for your applications.

In the browser terminal window

Type:

[source,shell]
----
oc apply -f examples/knative/messages-channel.yaml
oc apply -f examples/knative/words-channel.yaml
----

Make sure the channels have been created correctly

Type:

[source,shell]
----
oc get InMemoryChannel
----

You should see a screenshot like the one below

image::camekknative-4.png[InMemory Channels Ready]

You are looking for 'Ready' to be 'True'

=== Deploy the Integrations

.Introduction to the integrations that we will use
****
Now that we have deployed 2 message channels, we will deploy 3 Camel K Integrations. 'feed.groovy' will generate a simple sentence every 3 seconds, and send this to the 'message channel', 'splitter.groovy' will subscribe to the 'message channel', take the message, split the message into individual words before sending the individual words to 'words channel'. Finally, 'printer.groovy' will subscribe to the 'words.channel', read the words from the channel and print them to the output log.

The flow looks like :-

feed -> message channel -> spilter -> words channel -> printer

****

In the terminal window, deploy the 3 integrations

[source,shell]
----
kamel run examples/knative/feed.groovy
kamel run examples/knative/splitter.groovy
kamel run examples/knative/printer.groovy
----

Go to the developer view in the Openshift Console

Make sure you have chosen the project 'knative-user1'

NOTE: If this is the first time you've deployed a Camel K integration, it will take a few minutes to download the dependancies

NOTE: Until the 'splitter.grovy' integration deploys, expect to see errors from the 'feed.groovy' integration.  

Once, all 3 of the Integrations are deployed, the topology view should look like the screnshot below

image::camekknative-5.png[Integrations running]

Each of the integrations is producing log information. To view the log for a running pod in the console

At the time of writing, there is no easy way to view the pod log files of a knative service in the console, so in the developer view

click on advanced

click on Project details, and choose workloads, your screen should look similar to the one below

image::camekknative-6.png[Viewing overview of running Integration]

For each workload, you should see a '1 or 1 pods' on the right hand side. 'Click' on one of these.

You should see a screen similar to the one below

image::camekknative-7.png[Running Pod]

'Click' on the row name e.g. printer-xxxxxxxxxxxx

This should show you a screen similar to the one below

image::camekknative-8.png[Pod Details]

'Click' on 'Logs' to view the log for the pod. It should look something like the one below

image::camekknative-9.png[Pod Details]

Repeat the steps above for the other 2 Integrations if you like.

=== Knative in action

Make sure you are in the developer view of the console, looking at the Topology view before continuing

The 2 Integrations "hooked" into Knative Eventing are the 'spilter' and 'printer' integrations (you can visually see this on the topology view). 

Let's see if the promise of scale to zero works.

To stop the integrations, we need to stop messages arriving at the "messages.channel". To do this, we need to stop the feed integration.

Lets delete the 'feed.groovy' integration

In the terminal browser window, type

[source,shell]
----
kamel delete feed
----

Go back to the topology view, you will notice that the feed integration has gone. 

Show some patience now, keep lookng at the topology view, we are waiting (and hoping!) that the integrations scale down to zero.

You will know when this starts as the rings around the circles will change from the normal blue to a very dark blue, before going white. Once they are white, the integrations are scaled to zero just like the screenshot below

image::camekknative-10.png[Scaled to zero]

To wake the Integrations up again, redeploy the 'feed' integration.

[source,shell]
----
kamel run examples/knative/feed.groovy
----

Go back to the topology view and you should see the 'feed' integration redeploy, and the 'spillter' and 'printer' integrations awake from their slumber!

