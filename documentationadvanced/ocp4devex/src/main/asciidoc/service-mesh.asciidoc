:hide-uri-scheme:
== OpenShift Service Mesh

Author: Mark Roberts (feedback to mroberts@redhat.com)

=== Introduction




==== The Istio ingress gateway

All traffic entering the cluster, for all applications managed by the service mesh, uses the same istio ingress gateway. The gateway URL can be found from the istio-ingressgateway resource within the istio-system namespace.

The command below will show the hostname to be used for all interaction with applications managed by the service mesh:

[source]
----
oc get route istio-ingressgateway -n istio-system -o jsonpath='{.spec.host}{"\n"}'
----

Save the gateway URL as an environment variable to be re-used in further commands by executing :

[source]
----
export SM_GATEWAY=$(oc get route istio-ingressgateway -n istio-system -o jsonpath='{"http://"}{.spec.host}')
echo $SM_GATEWAY
----

==== View the istio related resources

The oc command 'oc get all' is often used to generate a list of all resources within a project. This is fine for listing the deployment configurations, services, replicasets and pods but it does not list the resources used to manage the service mesh. To view the istio related resources use the command below :

[source]
----
oc get istio-io
----

==== Create a new project for the service mesh activity

[source]
----
oc new-project service-mesh-X 
----

(Where X is your user number)

Not all projects are required to be managed by service mesh. As a result you need to add the project that you just created to the service mesh control plane so that the sidecar containers will be injected into the pods. If you have not downloaded the project assets from GitHub already during the workshop, then download them now by executing the following command in the OpenShift terminal window : 

[source]
----
cd /workspace
git clone https://github.com/utherp0/workshop4.git
cd workshop4/attendee/service-mesh
----

To add the current project as a service mesh member within the control plane called 'istio-system' execute the command :

[source]
----
oc create -f servicemeshmember.yaml
----



=== Phase 1

The micro-service based application that you are about to create is very simple and uses a rest interface that can be asked to call another downstream version of itself. This can continue for as many application instances we need to illustrate the features of the service mesh. 










[source]
----



----




Modify the deployment configuration such that the istio proxy sidecar is injected into the pod :

[source]
----
oc patch dc/wilma --patch \
'{"spec":{"template":{"metadata":{"annotations":{"sidecar.istio.io/inject":"true"}
}}}}'
----
