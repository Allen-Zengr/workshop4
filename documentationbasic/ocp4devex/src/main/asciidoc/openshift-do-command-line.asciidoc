== OpenShift DO

=== Introduction

*The OpenShift command line interface 'oc' is a general purpose interface with a vast set of commands for both development and administrative purposes. The odo command is a more developer centric command line interface for users who simply want to build, deploy and run applications on OpenShift. There is definitely a place for both tools within the kitbag of an OpenShift user, and for fast iterations of edit - run - edit - run the odo interface is perfect.*

*The approach described in the application basics chapter used a GIT repository as the source of the content to be built and deployed. This is a excellent approach when multiple users are working together in a complex application performing frequent integration of source code in GIT and validating their combined efforts as the project progresses. Avoiding such frequent integration activity will make the code of each developer diverge storing up integration headaches in the future.*

*The ability of the OpenShift 'Source-2-image' capability to identify the code within the GIT repository (from the options of Node.js, Java, Ruby, Perl, PHP, and Python), select a builder image, build the code and deliver a new container with the running application is a huge efficiency advantage for teams. However there are scenarios in which a single developer simply wants to get their code running as quickly as possible and which is where odo can be advantageous.*

*The principle of the odo command is that it can very quickly create a new project and use a 'GIT like' syntax to enable a developer to push the code into OpenShift. The receiving OpenShift cluster will then decide how to build the code, perform the build and deliver a running container. When the developer wants to make changes they simply push their code and the build and deploy operations are repeated. The first push process may take around a minute, but after that each iteration will take only a few seconds.*

*The diagram below shows how the odo command can fit into a development cycle. The outline diagram shows that the odo command is appropriate for single developers working with a degree of isolation, the team development involves multiple developers integrating their code through a GIT repository and the final phase involves the use of multiple clusters for the deployment of applications through to production.*

image::odo-1.png[odo in the development cycle]

*In more detail the diagram below shows how odo and oc / source-2-image work together to create a scaled development experience. In the single user phase the odo command is used to push the application code to a container in OpenShift. In the light blue box the source code is pushed to OpenShift in which the language specific builder image is used to create a new image containing the built code. This  image is started to create a running container. When the developer needs to share the code with the work of others GIT is used as a vehicle for integration and to remove any code conflicts.  This is the medium blue box in which the code is pushed to GIT and the OpenShift source-2-image capability is used to build a new running container. In the final phase shown in the darker blue box, the built container image can then be pushed to the Quay image repository to be stored securely ready for deployment to further environments such as pre-production and production.*

image::odo-2.png[odo in the development cycle - detail]
 
=== Installing

The odo command line interface is available for download from here : https://github.com/openshift/odo

*The Applications Basics chapter describes two different mechanisms for getting access to the command line tools for this workshop. If you are using the terminal within a container (option 2) then you already have the odo command line available to you. If you have chosen to install the command line utilities locally on your laptop then you will need to install odo using the download location above.*

*To use the command simply type 'odo' and you will see help regarding the objects and to get help on a specific object use 'odo <object> --help'.*

=== odo command set

*The odo command has the following subcommands :*

Commands:

  app         Perform application operations (delete, describe, list)
  catalog     Catalog related operations (describe, list, search)
  component   Manage components (create, delete, describe, link, list, log, push, unlink, update, watch)
  config      Change or view configuration (set, unset, view)
  debug       Debug commands (port-forward)
  preference  Modifies preference settings (set, unset, view)
  project     Perform project operations (create, delete, get, list, set)
  service     Perform service catalog operations (create, delete, list)
  storage     Perform storage operations (create, delete, list)
  url         Expose component to the outside world (create, delete, list)

Utility Commands:

  login       Login to cluster
  logout      Log out of the current OpenShift session
  utils       Utilities for terminal commands and modifying odo configurations (terminal)
  version     Print the client version information

Component Shortcuts:

  create      Create a new component 
  delete      Delete component 
  describe    Describe component 
  link        Link component to a service or component 
  list        List all components in the current application 
  log         Retrieve the log for the given component 
  push        Push source code to a component 
  unlink      Unlink component to a service or component 
  update      Update the source code path of a component 
  watch       Watch for changes, update component on change 

*The most common are used within this workshop but feel free to experiment with any of the above commands.*

=== Logging in

*To login using odo enter the command :*

odo login <user-name>

*If you are already logged in with the oc command then the credentials will be cached (assuming you use the same user name) and you will not have to enter a password.*

*The odo command will evolve over time and it performs a check to see if you have the latest version each time it is used. If there is an update available you will see a prompt similar to that which is shown below, underneath the text reporting the project that you are using.*

[source,shell]
---
A newer version of odo (v1.0.2) is available,
visit https://github.com/openshift/odo/releases to update.
If you wish to disable this notification, run:
odo preference set UpdateNotification false
---

*To see which version of odo you are using enter the command : *

odo version

==== Download source assets

*The pipeline assets are located in a GIT repository. Using your terminal window download the assets using the command below (if you have not done so for a previous chapter).*

If you are using the terminal in a pod ensure that the current directory is /workspace. If you are using your local machine select an appropriate location to which you have write access.

git clone https://github.com/utherp0/workshop4.git

cd workshop4/attendee/slave

ls -al

*You will see that the directory only has the source file slave.js and the package file called package.json.*

=== Create, push source & run cycle

*Create a new project using the odo command replacing X with your user number below.*

odo create nodejs node-app-slave --project master-slave-odo

*The syntax of the above command is :*

*odo create <component-type> <component-name> --project <project-for-the-component>*

*The result of running this command is simply the creation of a .odo directory containing a config.yaml file. The file contains the desired state for the application in OpenShift and is only committed to OpenShift and acted upon by OpenShift when the user issues the command 'odo push'. Examine the config.yaml file with the command:*

cat .odo/config.yaml

*Create a route for the application by using the command below:*

odo url create node-app-slave

*Examine the contents of the .odo/config.yaml file again and you will see that new content has been added:*

cat .odo/config.yaml

*Push the configuration to OpenShift:*

odo push

*The output from the above command is shown below:*

image::odo-3.png[odo in the development cycle - detail]

*The application is started up and will be running at the URL indicated in the output above. Copy the URL from your command window and paste it into a new browser tab. You should see an output similar to that shown below.*

Hello - this is the simple slave REST interface v1.0

*Make a small change to the comment in the source code of the slave.js file to change the line shown below:*
[source,shell]
----
response.send('Hello - this is the simple slave REST interface' + versionIdentifier);
----

*Change to :*
[source,shell]
----
response.send('Hello - MODIFIED and pushed with ODO' + versionIdentifier);
----
*Push the change to OpenShift:*

odo push

*The code still needed to be pushed to the component, but the final stage of building the component is much faster. Refresh the browser widow showing the application output and you will see your code change. The edit - push - test cycle is as simple as that.*

=== odo watch

*The odo process also has a 'watch' facility that allows you to force odo to constantly watch for source code changes and push them immediately. If you are using the terminal in a container open a second window so that you have two terminal windows. If you are using your local laptop simply open another terminal window. Ensure that the new terminal window is in the same directory as the first terminal window. Enter the command below to make odo watch for source code changes:*

odo watch

*The command window should report : 'Waiting for something to change in <current-working-directory>'*

*Switch back to your other terminal window and make another change to the source code, similar to the change above. After saving the edit switch to the terminal window in which you typed 'odo watch' and observe that a new push of the code to OpenShift has taken place.*

*The window with the watch command running will report:*

[source,shell]
----
File <path-to-source>/slave.js changed
Pushing files...
 ✓  Waiting for component to start [73ms]
 ✓  Syncing files to the component [11s]
 ✓  Building component [4s]
----

*Refresh the browser widow showing the application output and you will see your code change.*

*odo is clearly a very fast way to go from code to running your application without having to install tools and frameworks on your laptop.*












