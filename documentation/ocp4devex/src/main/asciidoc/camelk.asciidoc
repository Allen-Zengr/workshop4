[[webconsole]]

== Camel K on Openshift

=== Introduction

Apache Camel K is a lightweight integration framework built from Apache Camel that runs natively on Kubernetes and is specifically designed for serverless and microservice architectures.

Users of Camel K can instantly run integration code written in Camel DSL on their preferred cloud (Kubernetes or OpenShift).

We are going to use a new project to create our Camel K integrations

TIP: If you are not already logged on go to the UI URL and login as userx (x is the number provided to you) and password openshift. Open another tab in the browser and go to the terminal URL provided and again logon as userx with password openshift

=== Create a new project

In the browser based terminal window, create a new project called 'camelk-userx' where 'x' is your allocated user number 

[source,shell]
----
oc project camelk-userx
----

=== Camel K and the Operator Lifecycle Manager

.Camel K and the Operator Lifecycle Manager
****
Camel K uses the Operator Lifecycle manager, this means that new Custom Resource Definitions (CRDs) will be added to Openshift. These CRDs will extend the Openshift data model and allow Camel K to be managed using the standard ‘oc’ command. Installing operators requires a higher cluster privilage so the presenter will demonstrate the installation of the operator shortly.
****

Before installing Camel K make sure that the CRDs do not exist.

In the terminal window type

[source,shell]
----
oc whoami
----

If the response from the command is not your user name. Type ‘oc login’ and enter your username (userx) and password ‘openshift’. Rather than using your username and password, you could also use the recommended solution in the web console overview.

In the terminal browser window, type:-

[source,shell]
----
oc get integrations
oc get integrationplatforms
----

Both of these commands should return an *error*

*'ADMIN only - Presenter demonstrates'*

Explain both of the above CRDs and what they are used for in Camel K

Install Camel K:

If you are not already logged on go to the UI URL and login as ‘opentlc-mgr’ (Don’t forget to explain that this is a cluster admin function) and the admin password

Make sure you are on the ‘Administration View’ in the console

Go to 'Operators/Operator Hub'

Search for ‘camel k’

Install for all 'namespaces' in the cluster

Wait until the ‘Camel K Operator’ is shown as installed on the Operators/Installed Operators window

*'ADMIN only - finished'*

In the browser terminal window
Type:

[source,shell]
----
oc get integrations
oc get integrationplatforms
----

This time, both commands should return “no resources found”

Download the 'Camel K' examples using the browser terminal :-

=== Download and configure your environment
Create a directory to download the examples

type 'mkdir camel'

type 'cd camel'

Download the Camel K examples

[source,shell]
----
wget https://github.com/pprosser-redhat/devex-camelk/raw/master/camelexamples/camel-k-examples-1.0.0-M3.tar.gz
----

Uncompress the file

[source,shell]
----
tar -xf camel-k-examples-1.0.0-M3.tar.gz
----

To allow a developer to easily interact with an Openshift cluster, Camel K has it's own command line interface. Download the 'Camel K cli' :-

In the same directory, type

[source,shell]
----
wget https://github.com/pprosser-redhat/devex-camelk/raw/master/camelkcli/camel-k-client-1.0.0-M3-linux-64bit.tar.gz
----

Uncompress the file
[source,shell]
----
tar -xf camel-k-client-1.0.0-M3-linux-64bit.tar.gz
----

Before we can create an integration, we need to add a Camel K 'IntegrationPlatform'.

In the terminal window, type

[source,shell]
----
oc apply -f   https://raw.githubusercontent.com/pprosser-redhat/devex-camelk/master/camelkconfig/integrationplatform.yaml
----

*You should now have all the pieces you need to start creating and deploying lightweight Camel Integrations to Openshift.*

=== Deploy a Camel K Interation

Firstly, let’s start by deploying a simple integration, type

[source,shell]
----
./kamel run simple.groovy
----

NOTE: The first time you deploy an Integration, it will take a few minutes. The operator manages all dependencies required by the Integration and downloads these from the Red Hat repository on demand. Once downloaded, the operator caches dependancies therefore subsequent deployments are significantly quicker.  

You can see what’s going on :-

If you go to the console UI in the Browser, make sure you are switched to 'Developer view'

Click on 'Topology'

Click on 'Simple' (this is your integration), and you can see what’s going on.

Once the pod has a dark blue ring around it, it is running

Click on 'Resources'

Click on 'Pods -> simple-xxxxxxxx' (xxxxxxx is randomly generated)

Click on 'Logs' to see the output from the integration

The integration is a simple timer that triggers every 1 second and writes to the log file.

In the Terminal Browser window type

[source,shell]
----
oc get integrations
----
 
You should now see an integration called 'simple' in the list.

In the Terminal browser window type

[source,shell]
----
 oc describe integration simple
----

You’ll see the “Integration” CRD definition that includes the integration defined as groovy code.

Let’s make a change to the integration

In the browser terminal window
[source,shell]
----
vi simple.groovy 
----
You will see the text - 'Hello Camel K from ${routeId}'

Change the text e.g. 'Hello Camel K from ${routeId}. Added some more text'

TIP: To change the text, use the arrow gets to move to the text you want to change, press 'i', and type in the text. To save, press 'esc' and type ':wq' followed by 'enter'

Now, you need to deploy this integration to Openshift again to test

Type

[source,shell]
----
./kamel run simple.groovy
----

If you are quick enough (you need to be really quick!), you’ll see the integration doing a rolling deployment

Look at the log file again (as above) to see if the change has been deployed

=== Deploy Camel K in Developer mode
*While the process of redeploying is simple, it isn’t very developer friendly. The 'kamel' cli has a developer friendly “hot deploy” mode that makes this experience much better*


Let's try it out :-

Delete the integration :-
There are 2 ways you can do this in the Terminal Browser window (your choice) :-

Use the “kamel” cli
[source,shell]
----
./kamel delete simple
----
Or

Use the Openshift cli

[source,shell]
----
oc delete integration simple
----

NOTE: This is the great thing about CRDs, you can use the normal Openshift cli to managed the custom data model (integrations in this case)

Lets deploy the integration in developer mode, type
[source,shell]
----
./kamel run simple.groovy --dev
----

You will see the deployment phases logged on the screen, followed by the log outputting automatically from the integration pod, useful for a developer to see what’s going on

For the next exercise, you will need 2 terminal windows.

Copy the URL for the “browser terminal” and paste into a new browser tab

It should look something like :-
https://xxxxxxxxxxxxx/terminal/session/1


*You will notice that the terminal window is also outputting the log, you need to create a new terminal session* 

Change the url to a new session number e.g.
https://xxxxxxxxxxxxx/terminal/session/2

In the new terminal, make sure you go back to the camel directory - if you followed the instructions, it will be called 'camel'

Make another change to the text in “simple.groovy” by following the same instructions above

Once you have saved the changes, go back to the browser terminal tab outputting the log.

You should see that the changes have been automatically applied to the running integration, without the need to redeploy 

*That’s a much better way of round trip development of integrations…*

Go back to the browser terminal that’s outputting the log, press ‘ctrl c’

Look at the Topology view in the Openshift console(or oc get integrations) 

The integration should have been deleted - 

*Just like a developer would see by pressing 'ctrl c' on a Java application running on their laptop*

=== Optional labs

Feel free to take a look at some of the other examples

TIP: Instructions on how to run the integrations are in the integration source code
E.g. ./kamel run --name=rest-with-restlet --dependency=camel-rest --dependency=camel-restlet RestWithRestlet.java

The example above demonstrates Camel K deploying a Java based Camel Route that exposes a Restful service via an Openshift route - the Camel K operator does all the hard work for you

NOTE: some of the examples might take a little longer to deploy as the operator will need to download more dependencies

To test the rest api, you need to know what the Openshift Route is

In the Developer UI, go back to the Topology view, and click on “rest-with-restlet” application

Click on resources, and you will see the http route at the bottom of the page

Click on the http link

You will get an error as the integration will only response to /hello. Append ‘/hello’ to the URI
Now you should see a response


